



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `CPDefaultConnection`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=.;Initial Catalog=AkhbaarAlYawmDB;Persist Security Info=True;User ID=sa;Password=danat123$`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace AkhbaarAlYawm.DataAccess
{

	public partial class CPDefaultConnectionDB : Database
	{
		public CPDefaultConnectionDB() 
			: base("CPDefaultConnection")
		{
			CommonConstruct();
		}

		public CPDefaultConnectionDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			CPDefaultConnectionDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static CPDefaultConnectionDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new CPDefaultConnectionDB();
        }

		[ThreadStatic] static CPDefaultConnectionDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static CPDefaultConnectionDB repo { get { return CPDefaultConnectionDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	


	[TableName("dbo.webpages_Membership")]



	[PrimaryKey("UserId", AutoIncrement=false)]

	[ExplicitColumns]
    public partial class webpages_Membership : CPDefaultConnectionDB.Record<webpages_Membership>  
    {



		[Column] public int UserId { get; set; }





		[Column] public DateTime? CreateDate { get; set; }





		[Column] public string ConfirmationToken { get; set; }





		[Column] public bool? IsConfirmed { get; set; }





		[Column] public DateTime? LastPasswordFailureDate { get; set; }





		[Column] public int PasswordFailuresSinceLastSuccess { get; set; }





		[Column] public string Password { get; set; }





		[Column] public DateTime? PasswordChangedDate { get; set; }





		[Column] public string PasswordSalt { get; set; }





		[Column] public string PasswordVerificationToken { get; set; }





		[Column] public DateTime? PasswordVerificationTokenExpirationDate { get; set; }



	}

    

	[TableName("dbo.webpages_OAuthMembership")]



	[PrimaryKey("Provider", AutoIncrement=false)]

	[ExplicitColumns]
    public partial class webpages_OAuthMembership : CPDefaultConnectionDB.Record<webpages_OAuthMembership>  
    {



		[Column] public string Provider { get; set; }





		[Column] public string ProviderUserId { get; set; }





		[Column] public int UserId { get; set; }



	}

    

	[TableName("dbo.webpages_Roles")]



	[PrimaryKey("RoleId")]



	[ExplicitColumns]
    public partial class webpages_Role : CPDefaultConnectionDB.Record<webpages_Role>  
    {



		[Column] public int RoleId { get; set; }





		[Column] public string RoleName { get; set; }



	}

    

	[TableName("dbo.webpages_UsersInRoles")]



	[PrimaryKey("UserId", AutoIncrement=false)]

	[ExplicitColumns]
    public partial class webpages_UsersInRole : CPDefaultConnectionDB.Record<webpages_UsersInRole>  
    {



		[Column] public int UserId { get; set; }





		[Column] public int RoleId { get; set; }



	}

    

	[TableName("dbo.Sources")]



	[PrimaryKey("SourceID")]



	[ExplicitColumns]
    public partial class Source : CPDefaultConnectionDB.Record<Source>  
    {



		[Column] public int SourceID { get; set; }





		[Column] public string Name { get; set; }





		[Column] public string Website { get; set; }



	}

    

	[TableName("dbo.CreativeType")]



	[PrimaryKey("CreativeTypeID")]



	[ExplicitColumns]
    public partial class CreativeType : CPDefaultConnectionDB.Record<CreativeType>  
    {



		[Column] public int CreativeTypeID { get; set; }





		[Column] public string CreativeTypeName { get; set; }



	}

    

	[TableName("dbo.EntityMedia")]



	[PrimaryKey("EntityMediaID")]



	[ExplicitColumns]
    public partial class EntityMedia : CPDefaultConnectionDB.Record<EntityMedia>  
    {



        [Column]
        public int EntityMediaID { get; set; }





		[Column] public int? ArticleID { get; set; }





		[Column] public int? CreativeTypeID { get; set; }





		[Column] public string URL { get; set; }





		[Column] public string Thumbnail { get; set; }





		[Column] public bool? IsFeatured { get; set; }



	}

    

	[TableName("dbo.Articles")]



	[PrimaryKey("ArticleID")]



	[ExplicitColumns]
    public partial class Article : CPDefaultConnectionDB.Record<Article>  
    {



		[Column] public int ArticleID { get; set; }





		[Column] public string Title { get; set; }





		[Column] public string Body { get; set; }





		[Column] public int? SourceID { get; set; }





		[Column] public int? CommentCount { get; set; }





		[Column] public int ViewCount { get; set; }





		[Column] public bool? IsActive { get; set; }





		[Column] public DateTime? CreatedOn { get; set; }





		[Column] public DateTime? UpdatedOn { get; set; }





		[Column] public DateTime? PublishedOn { get; set; }





		[Column] public int? CreatedBy { get; set; }





		[Column] public int? UpdatedBy { get; set; }





		[Column] public int? PublishedBy { get; set; }



		[Column] public int? CityID { get; set; }


		[Column] public int? StateID { get; set; }



        [Column] public bool isFeatured { get; set; }



        [Column] public string IslamicDate { get; set; }



        [Column] public DateTime? mappedDate { get; set; }



        [Column] public int CategoryID { get; set; }


        [Column] public string ShortUrl { get; set; }

        [Column] public bool IsVideo { get; set; }
	}

    

	[TableName("dbo.NewsFeedType")]



	[PrimaryKey("NewsFeedTypeID")]



	[ExplicitColumns]
    public partial class NewsFeedType : CPDefaultConnectionDB.Record<NewsFeedType>  
    {



		[Column] public int NewsFeedTypeID { get; set; }





		[Column] public string NewsFeedTypeName { get; set; }



	}

    

	[TableName("dbo.NewsFeeds")]



	[PrimaryKey("NewsFeedID")]



	[ExplicitColumns]
    public partial class NewsFeed : CPDefaultConnectionDB.Record<NewsFeed>  
    {



		[Column] public int NewsFeedID { get; set; }





		[Column] public string Title { get; set; }





		[Column] public string Body { get; set; }





		[Column] public int? NewsFeedTypeID { get; set; }





		[Column] public int? Price { get; set; }





		[Column] public DateTime? CreatedOn { get; set; }





		[Column] public DateTime? PublishedOn { get; set; }





		[Column] public DateTime? UpdatedOn { get; set; }





		[Column] public int? CreatedBy { get; set; }





		[Column] public int? PublishedBy { get; set; }





		[Column] public int? UpdatedBy { get; set; }



	}

    

	[TableName("dbo.Comments")]



	[PrimaryKey("CommentID")]



	[ExplicitColumns]
    public partial class Comment : CPDefaultConnectionDB.Record<Comment>  
    {



		[Column] public int CommentID { get; set; }





		[Column] public int? ArticleID { get; set; }





		[Column] public int? ParentCommentID { get; set; }





		[Column] public bool? IsApproved { get; set; }





		[Column] public string Content { get; set; }





		[Column] public DateTime? CreatedOn { get; set; }





		[Column] public int? CreatedBy { get; set; }





		[Column] public DateTime? UpdatedOn { get; set; }





		[Column] public int? UpdatedBy { get; set; }


        [Column] public int CommentCategoryID { get; set; }
	}

    

	[TableName("dbo.Countries")]



	[PrimaryKey("CountryID", AutoIncrement=false)]

	[ExplicitColumns]
    public partial class Country : CPDefaultConnectionDB.Record<Country>  
    {



		[Column] public int CountryID { get; set; }





		[Column] public string ShortName { get; set; }





		[Column] public string Name { get; set; }



	}

    

	[TableName("dbo.States")]



	[PrimaryKey("StateID", AutoIncrement=false)]

	[ExplicitColumns]
    public partial class State : CPDefaultConnectionDB.Record<State>  
    {



		[Column] public int StateID { get; set; }





		[Column] public string Name { get; set; }





		[Column] public int CountryID { get; set; }



	}

    

	[TableName("dbo.Cities")]



	[PrimaryKey("CityID", AutoIncrement=false)]

	[ExplicitColumns]
    public partial class City : CPDefaultConnectionDB.Record<City>  
    {



		[Column] public int CityID { get; set; }





		[Column] public string Name { get; set; }





		[Column] public int? StateID { get; set; }



	}

    [TableName("dbo.Users")]



    [PrimaryKey("UserID", AutoIncrement = true)]

    [ExplicitColumns]
    public partial class Users : CPDefaultConnectionDB.Record<Users>
    {

        [Column]
        public int UserID { get; set; }

        [Column]
        public int EjamatID { get; set; }

        [Column]
        public string Password { get; set; }

        [Column]
        public string FirstName { get; set; }

        [Column]
        public string LastName { get; set; }

        [Column]
        public string Email { get; set; }

        [Column]
        public string UserGUID { get; set; }

        [Column]
        public DateTime CreatedOn { get; set; }

        [Column]
        public bool IsVerified { get; set; }


        [Column]
        public int UserStatusID { get; set; }


        [Column]
        public int RoleID { get; set; }

        [Column]
        public string ProfileImg { get; set; }

        [Column]
        public string ThumbnailProfileImg { get; set; }

        
    }


    [TableName("dbo.DeviceRegistration")]



    [PrimaryKey("DeviceID", AutoIncrement = true)]

    [ExplicitColumns]
    public partial class DeviceRegistration : CPDefaultConnectionDB.Record<DeviceRegistration>
    {
        [Column]
        public int DeviceID { get; set; }

        [Column]
        public string Type { get; set; }

        [Column]
        public string Token { get; set; }

        [Column]
        public string Version { get; set; }

        [Column]
        public string OSVersion { get; set; }


        [Column]
        public string IPAddress { get; set; }

        [Column]
        public DateTime? RegisteredOn { get; set; }

        [Column]
        public bool IsNewFollowerRequireNotification { get; set; }
        

        [Column]
        public int? UserID { get; set; }
    }

    [TableName("dbo.Categories")]



    [PrimaryKey("CategoryID", AutoIncrement = true)]

    [ExplicitColumns]
    public partial class Categories : CPDefaultConnectionDB.Record<Categories>
    {
        [Column]
        public int CategoryID { get; set; }

        [Column]
        public int? ParentCategoryID { get; set; }

        [Column]
        public string CategoryNameEn { get; set; }

        [Column]
        public string DescriptionEn { get; set; }

        [Column]
        public bool IsDeleted { get; set; }

        [Column]
        public DateTime CreatedOn { get; set; }


        [Column]
        public int CreatedBy { get; set; }

        [Column]
        public DateTime? ModifiedOn { get; set; }

        [Column]
        public int ModifiedBy { get; set; }

    }

    [TableName("dbo.CurrentQiyaam")]



    [PrimaryKey("CurrentQiyaamID", AutoIncrement = true)]

    [ExplicitColumns]
    public partial class CurrentQiyaam : CPDefaultConnectionDB.Record<CurrentQiyaam>
    {
        [Column]
        public int CurrentQiyaamID { get; set; }


        [Column]
        public string CurrentQiyaamMauze { get; set; }


    }

    [TableName("dbo.PhotoAlbum")]



    [PrimaryKey("PhotoAlbumID", AutoIncrement = true)]

    [ExplicitColumns]
    public partial class PhotoAlbum : CPDefaultConnectionDB.Record<PhotoAlbum>
    {
        [Column]
        public int PhotoAlbumID { get; set; }


        [Column]
        public string Title { get; set; }

        [Column]
        public string CoverPhotoImg { get; set; }


        [Column]
        public string CoverPhotoThumbnailImg { get; set; }

        [Column]
        public DateTime? publishedDate { get; set; }

        [Column]
        public string ShortUrl { get; set; }
    }

    [TableName("dbo.PhotoGallery")]



    [PrimaryKey("PhotoGalleryID", AutoIncrement = true)]

    [ExplicitColumns]
    public partial class PhotoGallery : CPDefaultConnectionDB.Record<PhotoGallery>
    {
        [Column]
        public int PhotoGalleryID { get; set; }


        [Column]
        public string PhotoImgUrl { get; set; }

        [Column]
        public int PhotoAlbumID { get; set; }

        [Column]
        public string PhotoThumbnailUrl { get; set; }
    }

    [TableName("dbo.HijriBohra_Gregorian_Calendar")]



    [PrimaryKey("ID", AutoIncrement = true)]

    [ExplicitColumns]
    public partial class HijriBohra_Gregorian_Calendar : CPDefaultConnectionDB.Record<HijriBohra_Gregorian_Calendar>
    {
        [Column]
        public int ID { get; set; }

        [Column]
        public string Hijri { get; set; }

        [Column]
        public DateTime Gregorian { get; set; }


        [Column]
        public string DayOfWeek { get; set; }

        [Column]
        public int H_Day { get; set; }

        [Column]
        public int H_Month { get; set; }

        [Column]
        public int H_Year { get; set; }

        [Column]
        public int G_Day { get; set; }

        [Column]
        public int G_Month { get; set; }

        [Column]
        public int G_Year { get; set; }

       
    }

    [TableName("dbo.Calender_Events")]



    [PrimaryKey("Calender_EventID", AutoIncrement = true)]

    [ExplicitColumns]
    public partial class Calender_Events : CPDefaultConnectionDB.Record<Calender_Events>
    {
        [Column]
        public int Calender_EventID { get; set; }


        [Column]
        public string EName { get; set; }

        [Column]
        public int? CityID { get; set; }

        [Column]
        public int? Rank { get; set; }

        [Column]
        public int ID { get; set; }

        [Column]
        public int ECategoryID { get; set; }
    }

    [TableName("dbo.EventCategories")]



    [PrimaryKey("ECategoryID", AutoIncrement = true)]

    [ExplicitColumns]
    public partial class EventCategories : CPDefaultConnectionDB.Record<EventCategories>
    {
        [Column]
        public int ECategoryID { get; set; }


        [Column]
        public string EName { get; set; }

    }

    [TableName("dbo.Event_Hijri_Mapping")]



    [PrimaryKey("Event_Hijri_MapID", AutoIncrement = true)]

    [ExplicitColumns]
    public partial class Event_Hijri_Mapping : CPDefaultConnectionDB.Record<Event_Hijri_Mapping>
    {
        [Column]
        public int Event_Hijri_MapID { get; set; }


        [Column]
        public int Calender_EventID { get; set; }


        [Column]
        public int ID { get; set; }
    }

    [TableName("EmailTokens")]


    [PrimaryKey("EmailTokenID")]



    [ExplicitColumns]
    public partial class EmailTokens : CPDefaultConnectionDB.Record<EmailTokens>
    {
        [Column]
        public int EmailTokenID { get; set; }


        [Column]
        public string FromName { get; set; }



        [Column]
        public string FromAddress { get; set; }



        [Column]
        public string ToAddress { get; set; }


        [Column]
        public string EmailSubject { get; set; }



        [Column]
        public string EmailBody { get; set; }



        [Column]
        public int EntityID { get; set; }

        [Column]
        public string EntityType { get; set; }

        [Column]
        public byte EmailPriority { get; set; }

        [Column]
        public DateTime EnqueuedOn { get; set; }

        [Column]
        public DateTime? ProcessedOn { get; set; }



        [Column]
        public string Status { get; set; }



        [Column]
        public string UnprocessableReason { get; set; }

        [Column]
        public int EmailTemplateID { get; set; }

    }

    [TableName("EmailTemplates")]


    [PrimaryKey("EmailTemplateID")]



    [ExplicitColumns]
    public partial class EmailTemplates : CPDefaultConnectionDB.Record<EmailTemplates>
    {
        [Column]
        public int EmailTemplateID { get; set; }


        [Column]
        public string Name { get; set; }



        [Column]
        public string Subject { get; set; }



        [Column]
        public string Body { get; set; }



    }


    [TableName("Currency")]


    [PrimaryKey("CurrencyID")]



    [ExplicitColumns]
    public partial class Currency : CPDefaultConnectionDB.Record<Currency>
    {
        [Column]
        public int CurrencyID { get; set; }


        [Column]
        public string Code { get; set; }



        [Column]
        public string CurrencyInfo { get; set; }



    }

    [TableName("Classified")]


    [PrimaryKey("ClassifiedID")]



    [ExplicitColumns]
    public partial class Classified : CPDefaultConnectionDB.Record<Classified>
    {
        [Column]
        public int ClassifiedID { get; set; }

        [Column]
        public string Title { get; set; }

        [Column]
        public string Description { get; set; }

        [Column]
        public int CityID { get; set; }

        [Column]
        public int PhoneCode { get; set; }

        [Column]
        public string PhoneNo { get; set; }

        [Column]
        public int CurrencyID { get; set; }

        [Column]
        public float Price { get; set; }

        [Column]
        public string Address { get; set; }


        [Column]
        public int UserID { get; set; }

        [Column]
        public DateTime PublishedDate { get; set; }

        [Column]
        public int ClassifiedAdCategoryID { get; set; }

        [Column]
        public int CommentCount { get; set; }



    }

    [TableName("NewsfeedClassifiedMedia")]


    [PrimaryKey("NewsfeedClassifiedMediaID")]



    [ExplicitColumns]
    public partial class NewsfeedClassifiedMedia : CPDefaultConnectionDB.Record<NewsfeedClassifiedMedia>
    {
        [Column]
        public int NewsfeedClassifiedMediaID { get; set; }

        [Column]
        public int EntityID { get; set; }

        [Column]
        public int EntityTypeID { get; set; }

        [Column]
        public int CreativeTypeID { get; set; }

        [Column]
        public string URL { get; set; }

        [Column]
        public string Thumbnail { get; set; }
    }

    [TableName("ClassifiedAdCategories")]


    [PrimaryKey("ClassifiedAdCategoryID")]



    [ExplicitColumns]
    public partial class ClassifiedAdCategories : CPDefaultConnectionDB.Record<ClassifiedAdCategories>
    {
        [Column]
        public int ClassifiedAdCategoryID { get; set; }

        [Column]
        public int ParentCategoryID { get; set; }

        [Column]
        public bool isApproved { get; set; }

        [Column]
        public string Name { get; set; }

        [Column]
        public DateTime CreatedOn { get; set; }

    }

    [TableName("UserLikes")]


    [PrimaryKey("UserLikeID")]



    [ExplicitColumns]
    public partial class UserLikes : CPDefaultConnectionDB.Record<UserLikes>
    {
        [Column]
        public int UserLikeID { get; set; }

        [Column]
        public int UserID { get; set; }

        [Column]
        public int EntityID { get; set; }

        [Column]
        public int EntityCategoryID { get; set; }

        [Column]
        public bool IsLike { get; set; }

    }


}



